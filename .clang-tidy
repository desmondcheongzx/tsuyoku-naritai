---
# Configure clang-tidy for this project.

# Adapted from https://github.com/googleapis/google-cloud-cpp/blob/main/.clang-tidy
#
# Here is an explanation for why some of the checks are disabled:
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -modernize-return-braced-init-list: We think removing typenames and using
#      only braced-init can hurt readability.
#
#  -performance-move-const-arg: This warning requires the developer to
#      know/care more about the implementation details of types/functions than
#      should be necessary. For example, `A a; F(std::move(a));` will trigger a
#      warning IFF `A` is a trivial type (and therefore the move is
#      meaningless). It would also warn if `F` accepts by `const&`, which is
#      another detail that the caller need not care about.
#
#  -readability-redundant-declaration: A friend declaration inside a class
#      counts as a declaration, so if we also declare that friend outside the
#      class in order to document it as part of the public API, that will
#      trigger a redundant declaration warning from this check.
#
#  -readability-function-cognitive-complexity: too many false positives with
#      clang-tidy-12. We need to disable this check in macros, and that setting
#      only appears in clang-tidy-13.
#
#  -bugprone-narrowing-conversions: too many false positives around
#      `std::size_t`  vs. `*::difference_type`.
#
#  -bugprone-easily-swappable-parameters: too many false positives.
#
Checks: >
  -*,
  abseil-*,
  bugprone-*,
  -bugprone-narrowing-conversions,
  -bugprone-easily-swappable-parameters,
  clang-diagnostic-*,
  clang-analyzer-*,
  google-*,
  misc-*,
  -misc-non-private-member-variables-in-classes
  modernize-*,
  -modernize-return-braced-init-list,
  -modernize-use-trailing-return-type,
  performance-*,
  -performance-move-const-arg,
  portability-*,
  readability-*,
  -readability-redundant-declaration,
  -readability-function-cognitive-complexity,


# Enable most warnings as errors.
WarningsAsErrors: >-
  bugprone-*,
  clang-*,
  google-*,
  misc-*,
  modernize-*,
  readability-*,
  performance-*

CheckOptions:
  - key:             bugprone-assert-side-effect.AssertMacros
    value:           'assert, DCHECK, DCHECK_EQ, DCHECK_LE, DCHECK_LT, DCHECK_GE, DCHECK_GT'

  - key:             modernize-use-default-member-init.UseAssignment
    value:           1

  - key:             modernize-use-auto.MinTypeNameLength
    value:           100

  - key:             readability-identifier-naming.NamespaceCase
    value:           lower_case

  - key:             readability-identifier-naming.ClassCase
    value:           CamelCase

  - key:             readability-identifier-naming.StructCase
    value:           CamelCase

#  - key:             readability-identifier-naming.TemplateParameterCase
#    value:           CamelCase

#  - key:             readability-identifier-naming.FunctionCase
#    value:           CamelCase

#  - key:             readability-identifier-naming.VariableCase
#    value:           lower_case

  - key:             readability-identifier-naming.PrivateMemberSuffix
    value:           _

  - key:             readability-identifier-naming.ProtectedMemberSuffix
    value:           _

#  - key:             readability-identifier-naming.MacroDefinitionCase
#    value:           UPPER_CASE

  - key:             readability-identifier-naming.EnumConstantCase
    value:           kConstantName

  - key:             readability-identifier-naming.ConstexprVariableCase
    value:           kConstantName

  - key:             readability-identifier-naming.GlobalConstantCase
    value:           kConstantName

  - key:             readability-identifier-naming.MemberConstantCase
    value:           kConstantName

  - key:             readability-braces-around-statements.ShortStatementLines
    value:           '1'
